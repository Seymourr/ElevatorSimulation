import java.util.ArrayList;
import java.util.Random;


public class SingleAutomatic extends Algorithm{
	
	public SingleAutomatic(ElevatorSpecs spec)
	{
		this.spec = spec;
		
	}
	
	private int getSomeElevator(ArrayList<Elevator> elev)
	{
		Random r = new Random();
		int number = r.nextInt(elev.size()); 
		return number;
	}
	
	
	//The best shuttle is the one at the same floor. If none are at the same floor, take the one in the list that has fewest allocations
	private int getBestShuttle(ArrayList<Elevator> elev, Passenger p)
	{
		int lowestQueue = elev.get(0).getQueue().size();
		int index = 0;
			for(int i = 0; i < elev.size(); i++) 
			{
				if(elev.get(i).getStatus().floor == p.getOrigin())
				{
					//Closest elevator is the best to take at the moment. Check if not full!
					if(elev.get(i).getStatus().passengers != spec.getCarryCapacity())
					{
						return i;
					}
				}
				if(elev.get(i).getQueue().size() < lowestQueue)
					{
						lowestQueue = elev.get(i).getQueue().size();
						index = i;
				}
			}
			return index;
	}

	public ArrayList<Elevator> manageShuttleCalls(int second, ArrayList<Elevator> shuttles, ArrayList<Passenger> newCalls)
	{
		int counter = 0;
		while(!traffic.isEmpty() && traffic.get(counter).getCallTime() == second)
		{
			//Time to create a passenger
			Passenger p = new Passenger(traffic.get(counter), spec);
			if(p.getDestination() == spec.getSkylobbyfloor() || p.getDestination() == spec.getLobbyFloor())
			{
				//Find best shuttle
				int shuttleIndex = getBestShuttle(shuttles, p);
				int position = shuttles.get(shuttleIndex).getQueue().size();
				if(shuttles.get(shuttleIndex).getStatus().floor == p.getOrigin() && shuttles.get(shuttleIndex).getStatus().direction == 0)
				{
					position = 0;
				}
				//Now have best available shuttle.. //TODO: Check if double decked, passenger need to know top or down in that case
				shuttles.get(shuttleIndex).addToQueue(p, shuttles.get(shuttleIndex).getQueue().size(), shuttles.get(shuttleIndex).getQueue().size() + 1, CarPosition.NULL); //EDIT
				traffic.remove(counter);
			}
			counter += 1;
		}

		//Now handling newCalls
		for(int i = 0; i < newCalls.size(); i++)
		{
			if(newCalls.get(i).getDestination() == spec.getSkylobbyfloor() || newCalls.get(i).getDestination() == spec.getLobbyFloor())
			{
				int shuttleIndex = getBestShuttle(shuttles, newCalls.get(i));
				shuttles.get(shuttleIndex).addToQueue(newCalls.get(i), shuttles.get(shuttleIndex).getQueue().size(), shuttles.get(shuttleIndex).getQueue().size() + 1, CarPosition.NULL);
			}
		}
		return shuttles;
	}

	//Eventually used, should be quite lame
	public ArrayList<Elevator> manageCalls(int second, ArrayList<Elevator> localElevators, ArrayList<Passenger>newCalls)
	{
		int counter = 0;
		while(!traffic.isEmpty() && traffic.get(counter).getCallTime() == second)
		{
			//Time to create a passenger
			Passenger p = new Passenger(traffic.get(counter), spec);
			if(p.getDestination() != spec.getSkylobbyfloor() && p.getDestination() != spec.getLobbyFloor())
			{
				//Find best shuttle
				int localIndex = getSomeElevator(localElevators);

				//TODO: Check if double decked, passenger need to know top or down in that case
				localElevators.get(localIndex).addToQueue(p, localElevators.get(localIndex).getQueue().size(), localElevators.get(localIndex).getQueue().size() + 1, CarPosition.NULL); 
				traffic.remove(counter);
			}
			counter += 1;
		}

		//Now handling newCalls
		for(int i = 0; i < newCalls.size(); i++)
		{
			if(newCalls.get(i).getDestination() != spec.getSkylobbyfloor() && newCalls.get(i).getDestination() != spec.getLobbyFloor())
			{
				int localIndex = getSomeElevator(localElevators); 
				localElevators.get(localIndex).addToQueue(newCalls.get(i), localElevators.get(localIndex).getQueue().size(), localElevators.get(localIndex).getQueue().size() + 1, CarPosition.NULL); 
			}
		}
		return localElevators;
	}
	
	public void setTraffic(ArrayList<Call> traffic)
	{
		this.traffic = traffic;
	}
}
