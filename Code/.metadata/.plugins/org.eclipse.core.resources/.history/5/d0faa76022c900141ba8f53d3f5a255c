import java.util.ArrayList;
import java.util.Random;
public class TrafficGenerator {
	
	private ElevatorSpecs specs;
	public TrafficGenerator(ElevatorSpecs specs)
	{
		this.specs = specs;
	}
	
	//Is skylobby a legit destination?
	//Call amount is one of the three traffic weights(1000, 5000, 10000) or a random number (5 % or so so)
	
	//TODO: Oldcalls should be removed, skylobby should not be legit destination floor. Random calls.
	
	private int getRandomNumber(int low, int high)
	{
		Random r = new Random();
		int destination = r.nextInt(high-low) + low; 
		return destination;
	}
	
	public ArrayList<Call> getTraffic(TrafficType t, int callAmount)
	{
		ArrayList<Call> newCalls = new ArrayList<Call>(); 
		
		switch(t)
		{
			case UPPEAK:

				for(int i = 0; i < callAmount; i++)
				{
					int destination = getRandomNumber(1, specs.getFloors() + 1);
					while(destination != specs.getSkylobbyfloor())
					{
						destination = getRandomNumber(1, specs.getFloors() + 1);
					}
					Call c = new Call(getRandomNumber(0, specs.getPeriodTime()), 0, destination);
					newCalls.add(c);
				}
				break;
			case LUNCH:
				for(int i = 0; i < callAmount; i++)
				{
					Call c = new Call(getRandomNumber(0, specs.getPeriodTime()), getRandomNumber(1, specs.getFloors() + 1), 0); //Assuming call reached destination
					newCalls.add(c);
					Call c2 = new Call(c.getCallTime() + 30, 0, c.getOriginFloor()); //30 minutes lunch break assumed, call afterwards
					newCalls.add(c2);
				}
				break;
			case DOWNPEAK:
				for(int i = 0; i < callAmount; i++)
				{
					Call c = new Call(getRandomNumber(0, specs.getPeriodTime()), getRandomNumber(1, specs.getFloors() + 1), 0);
					newCalls.add(c);
				}
				break;
			case REGULAR:
				for(int i = 0; i < callAmount; i++)
				{
					int destination = getRandomNumber(1, specs.getFloors() + 1);
					int origin = getRandomNumber(1, specs.getFloors() + 1);
					while(destination != origin)
					{
						destination = getRandomNumber(1, specs.getFloors() + 1);
					}
					Call c = new Call(getRandomNumber(0, specs.getPeriodTime()), origin, destination);
					newCalls.add(c);
				}
				break;
			default: 
				System.out.println("ERROR IN GET TRAFFIC, ABORTING SIMULATION");
				System.exit(0);
				break;
		}
		
		return newCalls;
	}
}
