import java.util.ArrayList;


public class SingleAutomatic extends Algorithm{
	
	public SingleAutomatic(ElevatorSpecs spec)
	{
		this.spec = spec;
		
	}
	
	
	public ArrayList<Elevator> manageCalls(int second, ArrayList<Elevator> localElevators, ArrayList<Elevator>shuttleElevators, ArrayList<Passenger>newCalls)
	{
		while(!traffic.isEmpty() && traffic.get(0).getCallTime() == second)
		{
			//Time to create a passenger
			Passenger p = new Passenger(traffic.get(0), spec);
			if(p.getDestination() == spec.getSkylobbyfloor() || p.getDestination() == spec.getLobbyFloor())
			{
				int lowestQueue = 0;
				Elevator temp;
				for(int i = 0; i < shuttleElevators.size(); i++)
				{
					if(shuttleElevators.get(i).getQueue().length <= lowestQueue)
					{
						//Good to go
						
					}
				}
			}
		}
		ArrayList<Elevator> allElev = localElevators;
		allElev.addAll(shuttleElevators);
		return allElev;
	}
	
	public void setTraffic(ArrayList<Call> traffic)
	{
		this.traffic = traffic;
	}
}
